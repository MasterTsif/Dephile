package main;

public class EventHandler
{
	GamePanel gp;
	EventRect[][] eventRect;

	int previousEventX, previousEventY;
	boolean canTouchEvent = true;

	public EventHandler(GamePanel gp)
	{
		this.gp = gp;

		eventRect = new EventRect[gp.maxWorldCol][gp.maxWorldRow];

		int col = 0;
		int row = 0;
		while (col < gp.maxWorldCol && row < gp.maxWorldRow)
		{
			eventRect[col][row] = new EventRect();
			eventRect[col][row].x = 23;
			eventRect[col][row].y = 23;
			eventRect[col][row].width = 2;
			eventRect[col][row].height = 2;
			eventRect[col][row].eventRectDefaultX = eventRect[col][row].x;
			eventRect[col][row].eventRectDefaultY = eventRect[col][row].y;

			col++;
			if (col == gp.maxWorldCol)
			{
				col = 0;
				row++;
			}

		}
	}

	public void checkEvent()
	{
		//check if the player is next to the event
		int xDistance = Math.abs( gp.player.worldX - previousEventX ); //returns absolute value
		int yDistance = Math.abs( gp.player.worldY - previousEventY );
		int distance = Math.max( xDistance, yDistance );
		if (distance > gp.tileSize) {canTouchEvent = true;}

		if (canTouchEvent)
		{
			//damage pits between trees
			if (hit( 15, 12, "any" )) damagePit( 18, 24, gp.dialogueState );
			if (hit( 34, 12, "any" )) damagePit( 18, 24, gp.dialogueState );
			if (hit( 15, 37, "any" )) damagePit( 18, 24, gp.dialogueState );
			if (hit( 34, 37, "any" )) damagePit( 18, 24, gp.dialogueState );
			//healing water down
			if (hit( 24, 36, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 23, 37, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 22, 38, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 21, 39, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 25, 37, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 26, 38, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 27, 39, "any" )) healingPool( 21, 24, gp.dialogueState );
			//healing water up
			if (hit( 24, 13, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 23, 12, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 22, 11, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 21, 10, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 25, 12, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 26, 11, "any" )) healingPool( 21, 24, gp.dialogueState );
			if (hit( 27, 10, "any" )) healingPool( 21, 24, gp.dialogueState );
			//moving sand
			if (hit( 43, 38, "any" )) movingSand( 18, 24, gp.dialogueState );
			if (hit( 44, 38, "any" )) movingSand( 18, 24, gp.dialogueState );
			if (hit( 40, 10, "any" )) movingSand( 18, 24, gp.dialogueState );
			//healing sand
			if (hit( 43, 25, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 44, 25, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 45, 25, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 46, 25, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 47, 25, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 25, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 24, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 23, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 22, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 21, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 20, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 42, 19, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 43, 19, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 44, 19, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 45, 19, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 46, 19, "any" )) healingPool( 18, 24, gp.dialogueState );
			if (hit( 47, 19, "any" )) healingPool( 18, 24, gp.dialogueState );


		}
	}

	public void damagePit(int col, int row, int gameState)
	{
		gp.gameState = gameState;
		gp.ui.currentDialogue = "You fell into a pit!";
		gp.player.life -= 1;
		//eventRect[col][row].eventDone = true;//on if you want the event to stop after 1 hit
		canTouchEvent = false;
		gp.playSE( 8 );
	}

	public void healingPool(int col, int row, int gameState)
	{
		if (gp.keyH.ePressed)
		{
			gp.gameState = gameState;
			gp.player.attackCanceled = true;
			gp.ui.currentDialogue = "You found a healing pool!\nHealth and speed restored!";
			gp.player.life = gp.player.maxLife;
			gp.player.speed = gp.player.maxSpeed;
			gp.player.mana = gp.player.maxMana;
			gp.playSE( 3 );

			//after you heal monsters reset
			gp.assetSetter.setMonster();
		}
	}

	public void movingSand(int col, int row, int gameState)
	{
		if (gp.player.speed > 2)
		{
			gp.gameState = gameState;
			gp.ui.currentDialogue = "You fell into moving sand!";
			gp.player.speed -= 1;
			//eventRect[col][row].eventDone = true;//on if you want the event to stop after 1 hit
			canTouchEvent = false;
			gp.playSE( 8 );
		}
	}

	public boolean hit(int col, int row, String reqDirection)
	{
		boolean hit = false;

		gp.player.solidArea.x = gp.player.worldX + gp.player.solidArea.x;
		gp.player.solidArea.y = gp.player.worldY + gp.player.solidArea.y;

		eventRect[col][row].x = col * gp.tileSize + eventRect[col][row].x;
		eventRect[col][row].y = row * gp.tileSize + eventRect[col][row].y;

		if (gp.player.solidArea.intersects( eventRect[col][row] ) && !eventRect[col][row].eventDone)
		{
			if (gp.player.direction.contentEquals( reqDirection ) || reqDirection.contentEquals( "any" ))
			{
				hit = true;

				previousEventX = gp.player.worldX;
				previousEventY = gp.player.worldY;

			}
		}

		//reset
		gp.player.solidArea.x = gp.player.solidAreaDefaultX;
		gp.player.solidArea.y = gp.player.solidAreaDefaultY;
		eventRect[col][row].x = eventRect[col][row].eventRectDefaultX;
		eventRect[col][row].y = eventRect[col][row].eventRectDefaultY;

		return hit;
	}
}

